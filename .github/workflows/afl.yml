name: ci

on:
  workflow_dispatch:
  push:
jobs:
  container-test-job:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        file_type: [ 'duckdb' ]
        # file_type: [ 'csv', 'json', 'parquet', 'duckdb', 'wal' ]
    steps:
      - name: Checkout Duckdb AFL++
        uses: actions/checkout@v4
        with:
          repository: duckdblabs/duckdb_aflplusplus
          ref: 'ci-csv_fuzz_with_flags'
          token: ${{ secrets.AFL }}
          
      - run: sed -i 's/3600/600/g' Makefile
      
      # - name: Verify directory structure
      
      #   run: |
      #     ls -la
      #     ls -la src
      #     ls -la scripts
      
      - name: Set up Docker environment
        run: |
          docker --version
          docker pull aflplusplus/aflplusplus

      - name: Start AFL++ container
        run: |
          # Run the container in detached mode, naming it 'afl-container'
          docker run --name afl-container -d aflplusplus/aflplusplus sleep infinity

      - name: Copy directories into container (make afl-up)
        run: |
          # Create necessary directories in the container and copy files
          docker exec -w / afl-container mkdir -p duckdb_aflplusplus
          docker cp src afl-container:/duckdb_aflplusplus/src
          docker cp scripts afl-container:/duckdb_aflplusplus/scripts
          docker exec afl-container mkdir -p /duckdb_aflplusplus/build
          docker exec afl-container mkdir -p /duckdb_aflplusplus/corpus
          docker exec afl-container mkdir -p /duckdb_aflplusplus/results
      - name: Install DuckDB into the container
        run: |
          # Install dependencies (like wget) and DuckDB inside the container
          docker exec afl-container apt-get update
          docker exec afl-container apt-get install -y wget unzip
          docker exec afl-container wget https://github.com/duckdb/duckdb/releases/download/v1.1.3/duckdb_cli-linux-amd64.zip
          docker exec afl-container unzip duckdb_cli-linux-amd64.zip
          docker exec afl-container mv duckdb /usr/local/bin/duckdb
          docker exec afl-container duckdb --version
      
      # - name: upterm
      #   uses: owenthereal/action-upterm@v1
      - name: Compile Fuzzer
        # continue-on-error: true
        run: |
          make compile-fuzzers-CI
          
      # - name: Install DuckDB
      #   run: |
      #     wget https://github.com/duckdb/duckdb/releases/download/v1.1.3/duckdb_cli-linux-amd64.zip
      #     unzip duckdb_cli-linux-amd64.zip
      #     sudo mv duckdb /usr/local/bin/duckdb
      #     rm duckdb_cli-linux-amd64.zip
      
      - name: Fuzz
        run: |
          # results with /fuzz_results/duckdb_file_fuzzer/default/crashes/ 
          python scripts/ci_scripts/test.py
          if [ $(ls /fuzz_results/*_file_fuzzer/default/crashes/ | wc -l) > 0 ]; then
            echo "Crashes directory is not empty"
          else
            echo "No crashes detected"
          fi

      - uses: owenthereal/action-upterm@v1

      - uses: actions/upload-artifact@v4
        continue-on-error: true
        with:
          name: crashes
          pattern: fuzz_results/*_file_fuzzer/default/crashes/*
          compression-level: 9
    
      # - name: Reproduce crashes
      #   if: success()
      #   continue-on-error: true
      #   run: |
      #     cd scripts
      #     ./scripts/test_duckdb_output.sh

      #     # file_type=duckdb
      #     # files=$(ls fuzz_results/${file_type}_file_fuzzer/default/crashes)
      #     # if [[ $file_type == 'duckdb' ]]; then
      #     #   echo "Testing $file_type output..."
      #     #   # the script also collects failing files into a report directory
      #     #   ./scripts/test_duckdb_output.sh
      #     # fi
          
      # - name: Upload files
      #   uses: actions/upload-artifact@v4
      #   with:
      #     path: report/*
      #     name: FILES

      - name: Setup upterm session
        uses: lhotari/action-upterm@v1

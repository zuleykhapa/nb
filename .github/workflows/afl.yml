name: ci

on:
  workflow_dispatch:
  push:

jobs:
  container-test-job:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Duckdb AFL++
        uses: actions/checkout@v4
        with:
          repository: duckdblabs/duckdb_aflplusplus
          ref: 'ci-csv_fuzz_with_flags'
          token: ${{secrets.AFL}}
          
      - run: sed -i 's/3600/1200/g' Makefile
      
      - name: Set up Docker environment
        run: |
          docker --version
          docker pull aflplusplus/aflplusplus

      - name: Start AFL++ container
        run: |
          docker run --name afl-container -d aflplusplus/aflplusplus sleep infinity

      - name: Copy directories into container (make afl-up)
        run: |
          docker exec -w / afl-container mkdir -p duckdb_aflplusplus
          docker cp src afl-container:/duckdb_aflplusplus/src
          docker cp scripts afl-container:/duckdb_aflplusplus/scripts
          docker exec afl-container mkdir -p /duckdb_aflplusplus/build
          docker exec afl-container mkdir -p /duckdb_aflplusplus/corpus
          docker exec afl-container mkdir -p /duckdb_aflplusplus/results

      - name: Install DuckDB into the container
        run: |
          docker exec afl-container apt-get update
          docker exec afl-container apt-get install -y wget unzip
          docker exec afl-container wget https://github.com/duckdb/duckdb/releases/download/v1.1.3/duckdb_cli-linux-amd64.zip
          docker exec afl-container unzip duckdb_cli-linux-amd64.zip
          docker exec afl-container mv duckdb /usr/local/bin/duckdb
          docker exec afl-container duckdb --version

      - name: Compile Fuzzer
        run: |
          make compile-fuzzers-CI

      - name: Install DuckDB locally
        run: |
          wget https://github.com/duckdb/duckdb/releases/download/v1.1.3/duckdb_cli-linux-amd64.zip
          unzip duckdb_cli-linux-amd64.zip
          sudo mv duckdb /usr/local/bin/duckdb
          rm duckdb_cli-linux-amd64.zip

      - name: Fuzz
        run: |
          # types=('csv' 'json' 'parquet' 'duckdb' 'wal')
          types=('csv' 'json' 'duckdb' 'wal')
          for file_type in "${types[@]}"; do 
            echo "Fuzzing $file_type ðŸ›œ"
            make "fuzz-${file_type}-file"
          done
          echo "Done fuzzing"

      - name: Inspect fuzz results
        continue-on-error: true
        run: |
          types=('csv' 'json' 'parquet' 'duckdb' 'wal')
          for file_type in "${types[@]}"; do 
            echo "Inspecting crashes for $file_type..."
            crash_dir=fuzz_results/${file_type}_file_fuzzer/default/crashes
            if [ -d "$crash_dir" ] && [ "$(ls -A $crash_dir)" ]; then
              echo "Crashes found for $file_type"
              ls "$crash_dir" > "${file_type}_crashes.txt"
              cat "${file_type}_crashes.txt"
            else
              echo "No crashes found for $file_type"
            fi
          done

      - name: Reproduce crashes
        continue-on-error: true
        run: |
          types=('csv' 'json' 'parquet' 'duckdb' 'wal')
          
          for file_type in "${types[@]}"; do 
            echo "Testing $file_type crashes..."

            if fuzz_results/${file_type}_file_fuzzer/default/crashes; then
              crash_dir=fuzz_results/${file_type}_file_fuzzer/default/crashes
              report_dir=report_${file_type}
              mkdir -p "$report_dir"
  
              if [ "$file_type" == "duckdb" ]; then
                ./scripts/test_duckdb_output.sh
              elif [ "$file_type" == "wal" ]; then
                ./scripts/fix_wal_files.sh
                ./scripts/wal_replay.sh
              else
                for fuzz_result in "$crash_dir"/*; do
                  if ! duckdb -c "SELECT * FROM read_${file_type}('$fuzz_result')"; then
                    cp "$fuzz_result" "$report_dir"
                  fi
                done
              fi
            fi
          done
          echo "Crash testing complete"

      - name: Upload files
        uses: actions/upload-artifact@v4
        with:
          path: report_*/**
          name: AFL++ Reports
